import React, { useState, useContext } from 'react';
import { UserContext } from "../contexts/UserContext";
import './ProfileModal.css';
import { useNavigate } from 'react-router-dom';
import ProfileView from './ProfileView';

export default function ProfileModal({ closeModal }) {
  const [isLogin, setIsLogin] = useState(true);
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [fullName, setFullName] = useState('');
  const { user, setUser } = useContext(UserContext); // –ü–æ–ª—É—á–∞–µ–º user –∏ setUser –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
  const navigate = useNavigate();

  const handleFormSubmit = async (e) => {
    e.preventDefault();
  
    // üìå –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ email
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email)) {
      alert("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email!");
      return;
    }
  
    const endpoint = isLogin ? 'login' : 'register';
    const payload = isLogin
      ? { email, password }
      : { email, password, fullName };
  
    try {
      const response = await fetch(`http://localhost:3000/api/auth/${endpoint}`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload),
      });
  
      const data = await response.json();
  
      if (response.ok) {
        setUser({
          fullName: data.fullName,
          role_id: data.role_id,
          token: data.token,
        });
  
        navigate('/profile');
        closeModal();
      } else {
        alert(data.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ/—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ/—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
      alert('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
    }
  };  

  if (user) {
    return <ProfileView closeModal={closeModal} />;
  }

  return (
    <div className="profile-modal">
      <div className="profile-modal-content">
        <div className="profile-modal-header">
          <h2>{isLogin ? '–í—Ö–æ–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å' : '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'}</h2>
          <button onClick={closeModal}>&#10005;</button>
        </div>
        <form className="profile-form" onSubmit={handleFormSubmit}>
          {!isLogin && (
            <input
              type="text"
              placeholder="–ü–æ–ª–Ω–æ–µ –∏–º—è"
              value={fullName}
              onChange={(e) => setFullName(e.target.value)}
              required
            />
          )}
          <input
            type="email"
            placeholder="–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            required
          />
          <input
            type="password"
            placeholder="–ü–∞—Ä–æ–ª—å"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            required
          />
          <button type="submit" disabled={!email || !password || (!isLogin && !fullName)}>
            {isLogin ? '–í–æ–π—Ç–∏' : '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è'}
          </button>
        </form>
        <button className="toggle-mode" onClick={() => setIsLogin(!isLogin)}>
          {isLogin ? '–ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞? –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å' : '–£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç? –í–æ–π—Ç–∏'}
        </button>
      </div>
    </div>
  );
}
