import React, { useEffect, useState, useContext } from 'react';
import { useParams, useNavigate, useLocation } from 'react-router-dom';
import './BookDetails.css';
import Reviews from './Reviews';
import { UserContext } from "../contexts/UserContext";

export default function BookDetails() {
  const { id } = useParams();
  const navigate = useNavigate();
  const location = useLocation();
  const fromCategory = new URLSearchParams(location.search).get('from');

  const { user } = useContext(UserContext);
  const [book, setBook] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [isExpanded, setIsExpanded] = useState(false);
  const maxLength = 360;

  // üìå –ó–∞–ø—Ä–æ—Å –∞—Ä–µ–Ω–¥—ã –∫–Ω–∏–≥–∏
  const [showRentalForm, setShowRentalForm] = useState(false);
  const [requestedReturnDate, setRequestedReturnDate] = useState('');

  const addToCart = async () => {
    if (!user) {
      alert("–í—ã –¥–æ–ª–∂–Ω—ã –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç!");
      return;
    }
  
    try {
      // üìå –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ—Ä–∑–∏–Ω—É
      const cartRes = await fetch('https://libro-by-backend.onrender.com/api/cart', {
        headers: { 'Authorization': `Bearer ${user.token}` }
      });
      const cartData = await cartRes.json();
  
      // üìå –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–≤–∞—Ä —É–∂–µ –≤ –∫–æ—Ä–∑–∏–Ω–µ
      const existingItem = cartData.find(item => item.book_id === book.id);
  
      // üìå –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä —É–∂–µ –≤ –∫–æ—Ä–∑–∏–Ω–µ, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
      if (existingItem) {
        const res = await fetch('https://libro-by-backend.onrender.com/api/cart/update', {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${user.token}`
          },
          body: JSON.stringify({ book_id: book.id, quantity: existingItem.quantity + 1 })
        });
  
        if (res.ok) {
          alert("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ —É–≤–µ–ª–∏—á–µ–Ω–æ!");
        } else {
          alert("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã");
        }
      } else {
        // üìå –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç –≤ –∫–æ—Ä–∑–∏–Ω–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
        const res = await fetch('https://libro-by-backend.onrender.com/api/cart/add', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${user.token}`
          },
          body: JSON.stringify({ book_id: book.id, quantity: 1 })
        });
  
        const data = await res.json();
        alert(data.message || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É");
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É:", error);
    }
  };
  
  const requestRental = async () => {
    if (!user) {
      alert("–í—ã –¥–æ–ª–∂–Ω—ã –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç!");
      return;
    }
    if (!requestedReturnDate) {
      alert("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –≤–æ–∑–≤—Ä–∞—Ç–∞!");
      return;
    }

    try {
      const res = await fetch('https://libro-by-backend.onrender.com/api/rental-requests', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${user.token}`
        },
        body: JSON.stringify({
          user_id: user.id,
          book_id: book.id,
          requested_return_date: requestedReturnDate
        })
      });

      if (res.ok) {
        alert("–ó–∞–ø—Ä–æ—Å –Ω–∞ –∞—Ä–µ–Ω–¥—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!");
        setShowRentalForm(false);
        setRequestedReturnDate('');
      } else {
        alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞");
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:", error);
    }
  };

  // üìå –ó–∞–≥—Ä—É–∑–∫–∞ –∫–Ω–∏–≥–∏
  useEffect(() => {
    fetch(`https://libro-by-backend.onrender.com/api/books/${id}`)
      .then(res => {
        if (!res.ok) throw new Error("–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
        return res.json();
      })
      .then(data => {
        setBook(data);
        setLoading(false);
      })
      .catch(err => {
        setError(err.message);
        setLoading(false);
      });
  }, [id]);

  // üìå –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –Ω–∞–∑–∞–¥
  const handleBack = () => {
    if (fromCategory) {
      navigate(`/catalog?category=${encodeURIComponent(fromCategory)}`);
    } else {
      navigate(-1);
    }
  };

  if (loading) return <div className="book-details"><p>–ó–∞–≥—Ä—É–∑–∫–∞...</p></div>;
  if (error) return <div className="book-details"><p>{error}</p></div>;

  return (
    <div className="book-details fade-in">
      <button className="back-button" onClick={handleBack}>–ù–∞–∑–∞–¥</button>

      <div className="book-details-content">
        <img
          src={`https://libro-by-backend.onrender.com${book.image}`}
          alt={book.title}
          className="book-details-image"
        />

        <div className="book-details-info">
          <h1>{book.title}</h1>
          <div className="book-meta">
            <span><strong>–ê–≤—Ç–æ—Ä:</strong> {book.author}</span>
            <span><strong>–ì–æ–¥ –∏–∑–¥–∞–Ω–∏—è:</strong> {book.year}</span>
          </div>
          <p className="book-price-details">{book.price} —Ä—É–±.</p>

          <div className="book-status">
            <div className="status-item">
              <span>–í –Ω–∞–ª–∏—á–∏–∏</span>
              <span className={book.available ? "checkmark" : "crossmark"}>
                {book.available ? "‚úî" : "‚úñ"}
              </span>
            </div>

            <div className="status-item">
              <span>–î–æ—Å—Ç—É–ø–Ω–æ –≤ –∞—Ä–µ–Ω–¥—É</span>
              <span className={book.rentable ? "checkmark" : "crossmark"}>
                {book.rentable ? "‚úî" : "‚úñ"}
              </span>
            </div>
          </div>

          <div className="book-actions">
          {/* üìå –ö–Ω–æ–ø–∫–∞ "–ü–æ–ª–æ–∂–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É" —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–Ω–∏–≥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ */}
          {book.available > 0 && (
            <button className="action-button" onClick={addToCart}>–ü–æ–ª–æ–∂–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É</button>
          )}

          {/* üìå –ö–Ω–æ–ø–∫–∞ "–í–∑—è—Ç—å –≤ –∞—Ä–µ–Ω–¥—É" —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–Ω–∏–≥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –∞—Ä–µ–Ω–¥—É */}
          {book.rentable > 0 && (
            <button className="action-button" onClick={() => setShowRentalForm(true)}>–í–∑—è—Ç—å –≤ –∞—Ä–µ–Ω–¥—É</button>
          )}
        </div>

          {showRentalForm && (
            <div className="rental-request-form">
              <label>–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –≤–æ–∑–≤—Ä–∞—Ç–∞:</label>
              <input
                type="date"
                value={requestedReturnDate}
                onChange={(e) => setRequestedReturnDate(e.target.value)}
                min={new Date().toISOString().split('T')[0]} // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ - —Å–µ–≥–æ–¥–Ω—è
              />
              <button onClick={requestRental}>–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å</button>
              <button onClick={() => setShowRentalForm(false)}>–û—Ç–º–µ–Ω–∞</button>
            </div>
          )}
          <div className={`book-description ${isExpanded ? 'expanded' : 'collapsed'}`}>
            {isExpanded ? (
              <>
                {book.description.split('\n').map((line, idx) =>
                  line.trim() === '' ? <div key={idx} style={{ height: '8px' }} /> : <p key={idx}>{line}</p>
                )}
                <p>
                  <span className="show-more" onClick={() => setIsExpanded(false)}>–°–∫—Ä—ã—Ç—å</span>
                </p>
              </>
            ) : (
              <p>
                {book.description.length > maxLength ? (
                  <>
                    {book.description.slice(0, maxLength - 5)}
                    {book.description.slice(maxLength - 5, maxLength).split("").map((char, index) => (
                      <span key={index} className={`fade-text fade-${index + 1}`}>{char}</span>
                    ))}
                    <span className="show-more" onClick={() => setIsExpanded(true)}>–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é</span>
                  </>
                ) : book.description}
              </p>
            )}
          </div>
        </div>

        <div className="reviews-wrapper">
          <Reviews bookId={book.id} />
        </div>
      </div>
    </div>
  );
}
